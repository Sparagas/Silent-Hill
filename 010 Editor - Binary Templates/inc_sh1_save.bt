//------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: sh1_save.bt
//   Authors: Laurynas Zubavičius (Sparagas)
//   Version: 0.0
//   Purpose: Parse Silent Hill (1) save game for Sony - PlayStation.
//  Category: Game
// File Mask: 
//  ID Bytes: 
//   History: 
//   0.0   2025-01-01 Laurynas Zubavičius : Initial version.
//------------------------------------------------


//------------------------------------------------
// Enums
//------------------------------------------------

enum <ubyte> SaveTitle {
    ANYWHERE     = 0,
    CAFE         = 1,
    BUS          = 2,
    STORE        = 3,
    INFIRMARY    = 4,
    DOGHOUSE     = 5,
    GORDON       = 6,
    CHURCH       = 7,
    GARAGE       = 8,
    POLICE       = 9,
    RECEPTION    = 10,
    ROOM_302     = 11,
    DIRECTORS    = 12,
    JEWELRY_SHOP = 13,
    POOL_HALL    = 14,
    ANTIQUE_SHOP = 15,
    THEME_PARK   = 16,
    BOAT         = 17,
    BRIDGE       = 18,
    MOTEL        = 19,
    LIGHTHOUSE   = 20,
    SEWER        = 21,
    NOWHERE      = 22,
    CHILDS_ROOM  = 23,
    NEXT_FEAR    = 24
};

enum <int8> ItemID {
    EMPTY                  = -1,
    UNEQUIPPED             = 0,

    HEALTH_DRINK           = 0x20,
    FIRST_AID_KIT          = 0x21,
    AMPOULE                = 0x22,

    LOBBY_KEY              = 0x40,
    HOUSE_KEY              = 0x41,
    KEY_OF_LION            = 0x42,
    KEY_OF_WOODMAN         = 0x43,
    KEY_OF_SCARECROW       = 0x44,
    LIBRARY_RESERVE_KEY    = 0x45,
    CLASSROOM_KEY          = 0x46,
    K_GORDON_KEY           = 0x47,
    DRAWBRIDGE_KEY         = 0x48,
    BASEMENT_KEY           = 0x49,
    BASEMENT_STOREROOM_KEY = 0x4A,
    EXAMINATION_ROOM_KEY   = 0x4B,
    ANTIQUE_SHOP_KEY       = 0x4C,
    SEWER_KEY              = 0x4D,
    KEY_OF_OPHIEL          = 0x4E,
    KEY_OF_HAGITH          = 0x4F,
    KEY_OF_PHALEG          = 0x50,
    KEY_OF_BETHOR          = 0x51,
    KEY_OF_ARATRON         = 0x52,
    NOTE_TO_SCHOOL         = 0x53,
    NOTE_DOGHOUSE          = 0x54,
    PICTURE_CARD           = 0x55,

    SEWER_EXIT_KEY         = 0x57,
    CHANNELING_STONE       = 0x58,

    CHEMICAL               = 0x60,
    GOLD_MEDALLION         = 0x61,
    SILVER_MEDALLION       = 0x62,
    RUBBER_BALL            = 0x63,
    FLAUROS                = 0x64,
    PLASTIC_BOTTLE         = 0x65,
    UNKNOWN_LIQUID         = 0x66,
    PLATE_OF_TURTLE        = 0x67,
    PLATE_OF_HATTER        = 0x68,
    PLATE_OF_CAT           = 0x69,
    PLATE_OF_QUEEN         = 0x6A,
    BLOOD_PACK             = 0x6B,
    DISINFECTING_ALCOHOL   = 0x6C,
    LIGHTER                = 0x6D,
    VIDEO_TAPE             = 0x6E,

    KAUFMANN_KEY           = 0x70,
    RECEIPT                = 0x71,
    SAFE_KEY               = 0x72,
    MAGNET                 = 0x73,
    MOTORCYCLE_KEY         = 0x74,
    BIRD_CAGE_KEY          = 0x75,
    PLIERS                 = 0x76,
    SCREWDRIVER            = 0x77,
    CAMERA                 = 0x78,
    RING_OF_CONTRACT       = 0x79,
    KITCHEN_KNIFE          = 0x80,
    STEEL_PIPE             = 0x81,
    ROCK_DRILL             = 0x82,
    
    HAMMER                 = 0x84,
    CHAINSAW               = 0x85,
    KATANA                 = 0x86,
    AXE                    = 0x87,

    HANDGUN                = 0xA0,
    HUNTING_RIFLE          = 0xA1,
    SHOTGUN                = 0xA2,
    HYPER_BLASTER          = 0xA3,

    HANDGUN_BULLETS        = 0xC0,
    RIFLE_SHELLS           = 0xC1,
    SHOTGUN_SHELLS         = 0xC2,

    FLASHLIGHT             = 0xE0,
    POCKET_RADIO           = 0xE1,
    GASOLINE_TANK          = 0xE2
};

enum <int8> Commands {
    USE_HEALTH = 0,
    USE = 1,
    EQUIP = 2,
    UNEQUIP = 3,
    EQUIP_RELOAD = 4,
    UNEQUIP_RELOAD = 5,
    ON_OFF = 6,
    RELOAD = 7,
    LOOK = 8,
    USE_LOOK = 9
    // flashlight 11 in day time?
};

//------------------------------------------------
// Structs
//------------------------------------------------

typedef int32 q20_12 <read=Str("%lg", this / 4096.0),
                     write=(this = Atof(value) * 4096.0)>;

struct SaveLoadScreen {
    uint16    totalSavesCount;    // probaly total count on all playthroughs
    uint16    unk_02;
    q20_12    gameplayTimer;
    uint16    savesCount;         // only counts on current playthrough
    SaveTitle saveTitle;
    uint8     isTitleYellowFlag;
};

struct SH1Header {
    char           unkPadding[4];
    SaveLoadScreen saveLoadScreen[11];
    ubyte          padding[116];
    ubyte          xor[2];
    ubyte          end_dc[2];
};

struct Buttons {
    uint16 buttonSelect   : 1; // 0x01
    uint16 buttonL3       : 1; // 0x02
    uint16 buttonR3       : 1; // 0x04
    uint16 buttonStart    : 1; // 0x08
    uint16 buttonUp       : 1; // 0x10
    uint16 buttonRight    : 1; // 0x20
    uint16 buttonDown     : 1; // 0x40
    uint16 buttonLeft     : 1; // 0x80

    uint16 buttonL2       : 1; // 0x0100
    uint16 buttonR2       : 1; // 0x0200
    uint16 buttonL1       : 1; // 0x0400
    uint16 buttonR1       : 1; // 0x0800
    uint16 buttonTriangle : 1; // 0x1000
    uint16 buttonCircle   : 1; // 0x2000
    uint16 buttonCross    : 1; // 0x4000
    uint16 buttonSquare   : 1; // 0x8000
};

struct ControllerConfig {
    Buttons enter;
    Buttons cancel;
    Buttons skip;
    Buttons action;
    Buttons aim;
    Buttons light;
    Buttons run;
    Buttons view;
    Buttons stepL;
    Buttons stepR;
    Buttons pause;
    Buttons item;
    Buttons map;
    Buttons option;
};

struct ScreenPosition {
    int8  screenPosX;  // Range: [-11, 11], default: 0
    int8  screenPosY;  // Range: [-8, 8], default: 0
};

struct SH1GlobalOptions {
    ControllerConfig controllerConfig;
    ScreenPosition   screenPosition;
    uint8            sound;                // Stereo: 0, Monaural: 1, default: Stereo
    uint8            bgmVolume;            // Range: [0, 128] with steps of 8, default: 16
    uint8            seVoume;              // Range: [0, 128] with steps of 8, default: 16
    uint8            vibration;            // Off: 0, On: 128, default: On
    uint8            brighntess;           // Range: [0, 7], default: 3
    uint8            weaponControl;        // Switch: 0, Press: 1, default: Press
    uint8            bloodColor;           // Normal: 0, Green: 2, Violet: 5, Black: 13, default: Normal
    uint8            autoLoad;             // Off: 0, On: 1, default: Off
    ubyte            unk_26;               
    uint8            ExtraOptionsEnabled;  // for some reason it is not 1 when enabled?
    uint8            viewControl;          // Normal: 0, Reverse: 1, default: Normal
    ubyte            secretViewMode;       // Normal: 0, Self View: 1, default: Normal
    uint8            retreatTurn;          // Normal: 0, Reverse: 1, default: Normal
    uint8            walkRunControl;       // Normal: 0, Reverse: 1, default: Normal
    uint8            autoAiming;           // On: 0, Off: 1, default: On
    uint8            secretBulletAdjust;   // x1-x5: Range [0, 5], default: x1.
    ubyte            unk1[2];              // Looks like non-zero values in "Next Fear" mode.
    ubyte            Padding[76];
    ubyte            xor[2];
    ubyte            end_dc[2];
};

struct SH1Item {
    ItemID   id;
    uint8    count;
    Commands commands;
    uint8    unk_index;
};

struct HasMapsFlags {
    uint32 otherPlaces    : 1; // 0x01 Impossible to obtain. Displays oldTown with infinite arrows in places where there are no maps (like Nowthere)
    uint32 oldTown        : 1; // 0x02
    uint32 fogCentralTown : 1; // 0x04
    uint32 altCentralTown : 1; // 0x04
    uint32 resortTown     : 1; // 0x08
    uint32 fogSchoolBF    : 1; // 0x20
    uint32 fogSchool1F    : 1; // 0x40
    uint32 fogSchool2F    : 1; // 0x08

    uint32 fogSchoolRF    : 1; // 0x0100
    uint32 altSchoolBF    : 1; // 0x0200
    uint32 altSchool1F    : 1; // 0x0400
    uint32 altSchool2F    : 1; // 0x0800
    uint32 altSchoolRF    : 1; // 0x1000
    uint32 fogSewer1F     : 1; // 0x2000
    uint32 fogSewer2F     : 1; // 0x4000
    uint32 altSewer       : 1; // 0x0800

    uint32 fogHospitalBF  : 1; // 0x010000
    uint32 fogHospital1F  : 1; // 0x020000
    uint32 fogHospital2F  : 1; // 0x040000
    uint32 fogHospital3F  : 1; // 0x080000
    uint32 altHospitalBF  : 1; // 0x100000
    uint32 altHospital1F  : 1; // 0x200000
    uint32 altHospital2F  : 1; // 0x400000
    uint32 altHospital3F  : 1; // 0x800000
};

struct SH1Save {
    SH1Item      sh1Items[40];
    char         unkPadding[4];
    ubyte        unkMapOverlayIdx;  // mapOverlayIdx
    ubyte        field_A5;
    uint16       savesCount;
    SaveTitle    saveTitle;         // mapEventIdx
    uint8        unkMapIdx;         // mapIdx
    ItemID       equippedWeapon;    // default: 0
    ubyte        field_AB;
    uint32       flags_AC;
    uint32       field_B0[45];      // FF
    HasMapsFlags hasMapsFlags;
    uint32       eventFlags[6];
    /*
    [0] 02 00 00 00 In game Intro
        03 00 00 00 after founding Cheryl
    
    [1] 80 01 02 00 original
    [1] 88 01 02 00 when picked up KITCHEN_KNIFE
    [1] 90 01 02 00 when picked up FLASHLIGHT
    [1] D0 07 02 00 when picked up FLASHLIGHT and MAP
    [1] D8 0F 02 00 when picked up FLASHLIGHT and MAP and KITCHEN_KNIFE
    
    first byte:
    KITCHEN_KNIFE 00001000
    FLASHLIGHT    00010000
    MAP_IN_CAFE   01000000
    CAFE_EVENT    10000000
    
    second byte:
    00001000 picked all necesery items to go outside?
    */
    
    uint32    field_180[2];
    uint32    field_188;
    uint32    field_18C;
    uint32    field_190[4];
    uint32    field_1A0;
    uint32    field_1A4[12];
    /*
    [3] 00 00 10 00 HEALTH_DRINK Cafee near TV
    [3] 00 00 20 00 HEALTH_DRINK Cafee near MAP
    [5] 00 00 00 01 HANDGUN_BULLETS near Caffe on a bench to the right
    [5] 00 00 80 00 HANDGUN_BULLETS near Caffe on a bench to the left
    */
    
    
    uint32    mapMarkingsFlags[25];
    /*
    [0] oldTown_Bachman top     10 00 00 00
    [0] oldTown_Cofe arrow      40 00 00 00
    [0] oldTown_Cofe sign       00 01 00 00
    [0] oldTown_Cheryl          00 04 00 00
    [0] oldTown_Finney left     00 10 00 00
    [0] oldTown_Midwitch top    00 40 00 00
    [0] oldTown_Midwitch left   00 00 01 00
    [0] oldTown_Midwitch bot    00 00 04 00
    [0] oldTown_Bradbury mid    00 00 10 00
    [0] oldTown_Bradbury left   00 00 40 00
    [0] oldTown_BACHMAN bot     00 00 00 01
    [0] oldTown_Elroy bot       00 00 00 04
    [0] oldTown_bot right big x 00 00 00 10
    [0] oldTown_Elroy mid       00 00 00 40
    
    [1] oldTown_Bachman mid       01 00 00 00
    [1] oldTown_Finney right      04 00 00 00
    [1] oldTown_Bloch left        10 00 00 00
    [1] oldTown_Levin top         40 00 00 00
    [1] oldTown_Bloch mid         00 01 00 00
    [1] oldTown_Levin bot         00 04 00 00
    [1] oldTown_Levin Bloch combo 00 10 00 00
    [1] oldTown_Matheson          00 40 00 00
    [1] oldTown_Doghouse arrows   00 00 01 00
    [1] oldTown_Gordon arrows     00 00 04 00
    [1] oldTown_Finey right Arrow 00 00 10 00
    [1] oldTown_dog yard line     00 00 40 00
    [1] oldTown_Ellroy circle     00 00 00 01
    [1] oldTown_Bloch right       00 00 00 04
    [1] oldTown_Bridge correction 00 00 00 08
    [1] oldTown_Bridge arrow      00 00 00 10
    [1] oldTown_church circle     00 00 00 40
    [1] oldTown_church check      00 00 00 80
    
    [2] oldTown_School circle      04 00 00 00
    [2] oldTown_School check       08 00 00 00
    [2] oldTown_Gordon mark        10 00 00 00
    [2] oldTown_Dog house dot      40 00 00 00
    [2] fogCentralTown_antique     00 00 01 00
    [2] fogCentralTown_hospital    00 00 04 00
    [2] fogCentralTown_CrichtonTop 00 00 10 00
    [2] fogCentralTown_CrichtonBot 00 00 40 00
    [2] fogCentralTown_Sagan       00 00 00 01
    [2] fogCentralTown_Koontz      00 00 00 04
    [2] fogCentralTown_Simmons     00 00 00 10
    
    [3] altCentralTown_antique     00 00 04 00
    [3] altCentralTown_hospital    00 00 10 00
    [3] altCentralTown_CrichtonTop 00 00 40 00
    [3] altCentralTown_CrichtonBot 00 00 00 01
    [3] altCentralTown_SimmonsTop  00 00 00 04
    [3] altCentralTown_SimmonsMid  00 00 00 10
    [3] altCentralTown_SimmonsMid  00 00 00 40
    
    [4] altCentralTown_Wilson         01 00 00 00
    [4] altCentralTown_Koontz         04 00 00 00
    [4] altCentralTown_SaganRight     10 00 00 00
    [4] altCentralTown_SaganLeft      40 00 00 00
    [4] altCentralTown_parkingLot     00 01 00 00
    [4] altCentralTown_untatiledBot   00 04 00 00
    [4] altCentralTown_CrichtonKoontz 00 40 00 00
    [4] resortTown_Bachman            00 00 10 00
    [4] resortTown_Craig              00 00 40 00
    [4] resortTown_GarageRight        00 00 00 01
    [4] resortTown_GarageBot          00 00 00 04
    [4] resortTown_SandfordLeft       00 00 00 10
    [4] resortTown_SandfordRight      00 00 00 40
    
    [5] resortTown_LighthouseCircle   01 00 00 00
    [5] resortTown_LighthouseCheck    02 00 00 00
    [5] resortTown_ThemeParkArrow     04 00 00 00
    [5] fogSchoolBF_StorageBroken     00 00 40 00
    [5] fogSchoolBF_StorageEnter      00 00 80 00
    [5] fogSchoolBF_BoilerEnter       00 00 00 02
    */

    uint32    field_238;
    uint16    pickedUpItemCount;
    ubyte     field_23E;
    ubyte     field_23F;;
    q20_12    playerHealth;        // default: 100
    q20_12    playerPositionX;
    int16     playerRotationY      <read=Str("%lg deg", this / 4096.0 * 360),
                                   write=(this = Atof(value) * 4096.0 / 360.0)>; // North = 0, clockwise rotation
    ubyte     unk_4[2];
    q20_12    playerPositionZ;
    q20_12    gameplayTimer;
    q20_12    runDistance;
    q20_12    walkDistance;

    uint8     unk_pad;
    uint16    meleeKills;
    uint8     rangedKills;
    uint32    unkDifficulity;  // Packed data. Stores game difficulty and something else.
    /*
    dificulity modifier?
    Easy:   00 00 00 F0 // -16
    Normal: 00 00 00 00
    Hard:   00 00 00 10 //  16
    */
    
    uint16    shotsFired;
    uint16    shortRangeShots;
    uint16    middleRangeShots;
    uint16    longRangeShots;
    uint16    field_26C;
    uint16    field_26E;  // related to enemy kills.
    uint16    field_270;
    uint16    field_272;
    uint16    field_274;
    uint16    field_276;
    uint16    field_278;
    ubyte     field_27A;
    ubyte     continuesCount;
    ubyte     xor[2];
    ubyte     end_dc[2];
};

/*
// for now as a quick script hack, this part is moved to ps1_memory_card.bt
SH1Header         sh1Header;
SH1GlobalOptions  sh1GlobalOptions;
SH1Save           sh1Saves[11];
Sector            unkDummySector[2];
*/
