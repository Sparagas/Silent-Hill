//------------------------------------------------
//--- 010 Editor v13.0.2 Binary Template
//
//      File: SH4 Scene Data
//   Authors: Hunter Stanton, roocker666
//   Version: 
//   Purpose: A 010 Editor template for Silent Hill 4 scene data in the Silent Hill 4 executable. Intended for PC but might apply to Xbox and PS2.
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <uint16> EntryTypes
{
    // TODO: Figure out all these types
    // types for SFX triggers, doors, load zones, and etc. are likely somewhere here
    SceneNum = 0,
    ObjType = 1,
    SetExecutor = 2,
    SetConstructor = 3,
    SetDestructor = 4,
    SetRender = 5,
    SetAllFuncs = 6,
    SetEnemy = 7,
    SetXYZW = 8,
    SetRotation = 9,
    SetID1234 = 10,
    Unknown = 11,
    Unknown2 = 12,
    Unknown3 = 13,
    Unknown4 = 14,
    Unknown5 = 15,
    Unknown6 = 16,
    Unknown7 = 17,
    Unknown8 = 18,
    Unknown9 = 19,
    UnknownTwoFloats = 20,
    UnknownThreeFloats = 21,
    Unknown12 = 22,
    Unknown13 = 23,
    SetEventDriver = 24,
    Unknown14 = 25,
    Unknown15 = 26,
    Unknown16 = 27,
    End = -3856
};

enum <uint32> EntrySubTypes
{
    AnotherWorldNormalObj = 1,
    ObjDontMove = 3,
    EventHit = 4,
    Phenom = 6,
    TextEvent = 7,
    EventHit3 = 8,
    ItemEvent = 9,
    EventCamera = 11,
};

typedef struct Position
{
    float x;
    float y;
    float z;
    float w;
} Position;

enum EnemyType
{
    ENEMY_KIND_NOTHING,
    ENEMY_KIND_CELL,
    ENEMY_KIND_MUSH,
    ENEMY_KIND_BUZZ,
    ENEMY_KIND_MM,
    ENEMY_KIND_WALLMAN,
    ENEMY_KIND_WHEEL,
    ENEMY_KIND_JINMEN,
    ENEMY_KIND_TWINS,
    ENEMY_KIND_HIL,
    ENEMY_KIND_HYENA,
    ENEMY_KIND_MULTI,
    ENEMY_KIND_PICKGIRL,
    ENEMY_KIND_FLAMES,
    ENEMY_KIND_FAT,
    ENEMY_KIND_SCRATCH,
    ENEMY_KIND_KILLER,
    ENEMY_KIND_NURSE,
    ENEMY_KIND_SAMPLE,
    ENEMY_KIND_MAX,
};

typedef struct SceneEntry
{
    EntryTypes type;
    uint16 numValues;

    switch(type)
    {
        case ObjType:
            EntrySubTypes type;
            break;
        case SetExecutor:
            int32 executor <format=hex>;
            break;
        case SetConstructor:
            int32 constructor <format=hex>;
            break;
        case SetDestructor:
            int32 destructor <format=hex>;
            break;
        case SetRender:
            int32 render <format=hex>;
            break;
        case SetAllFuncs:
            int32 executor <format=hex>;
            int32 constructor <format=hex>;
            int32 destructor <format=hex>;
            int32 render <format=hex>;
            break;
        case SetEventDriver:
            int32 driver <format=hex>;
            break;
        case SetXYZW:
            Position pos;
            break;
        case SetRotation:
            float rot;
            break;
        case UnknownThreeFloats:
            float x;
            float y;
            float z;
            break;
        case SetEnemy:
            EnemyType type;
            break;
        case UnknownTwoFloats:
            float x;
            float y;
            break;
        default:
            int32 values[numValues];
    }
} sceneEntry;

typedef struct Object
{
    SceneEntry firstEntry;
    while(ReadShort() != 1 && ReadShort() != 0)
    {
        if(ReadShort() == -3856)
        {
            return;
        }
        SceneEntry entry;
    }
    return;
} object;

typedef struct SceneDef
{
    SceneEntry firstEntry;
    while(ReadShort() != 0)
    {
        Object entries;
    }
} sceneDef;

struct SceneData {
    // read the scene data like how the game does
    // it loops reading until it encounters the value 0xF0F0 which is the ending marker
    while(1==1)
    {
     SceneDef scene;
    }
} sceneData;