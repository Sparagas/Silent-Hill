//------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: sh4_skeletal_model_pc.bt
//   Authors: Laurynas Zubavičius (Sparagas), Hunter Stanton (hun10sta), Rodolfo Nuñez (roocker666)
//   Version: 0.0
//   Purpose: Parse Silent Hill 4: The Room skeletal models for Microsoft - Windows.
//  Category: CAD
// File Mask: 
//  ID Bytes: 03 00 FF FF
//   History: 
//   0.0   2025-01-01 Laurynas Zubavičius : Initial version.
//------------------------------------------------

typedef struct FuncData
{
    int16 skeleton_no;
    int16 func_id;
} funcData;

typedef struct Float3
{
    float x;
    float y;
    float z;
} float3;

typedef struct Box
{
    float x;
    float y;
    float z;
int unk;
} box;

typedef struct ClusterNode
{
    short i;
    short j;
    short k;
} clusterNode;

typedef struct FourByFourMatrix
{
    float M00;
    float M01;
    float M02;
    float M03;
    float M10;
    float M11;
    float M12;
    float M13;
    float M20;
    float M21;
    float M22;
    float M23;
    float M30;
    float M31;
    float M32;
    float M33;
} fourByFourMatrix;

typedef enum MeshRevision
{
    SilentHill4 = 4,
} meshRevisions;

typedef struct Vertex
{
    Float3 position;
    Float3 normals;
    int16 texCoordU;
    int16 texCoordV;
    float shaderSelect[4];
    float weights[4];
} vertex;

typedef struct ChrPart
{   local int ofs = FTell();
    uint32 size;
    uint32 unk_type;
    uint32 ofs_packet <format=hex>;
    uint32 unk_packet_qwc;
    uint32 unk_xtop;
    uint32 num_cluster_data;
    uint32 ofs_cluster_data <format=hex>;
    uint32 num_skeletons;
    uint32 ofs_skeletons <format=hex>;
    uint32 num_skeleton_pairs;
    uint32 ofs_skeleton_pairs <format=hex>;
    uint32 ofs_data_skeletons <format=hex>;
    uint32 ofs_data_skeleton_pairs <format=hex>;
    uint32 num_textures;
    uint32 ofs_text_pos_indices <format=hex>;
    uint32 ofs_texture_params <format=hex>;
    ubyte  unk_shading_type;
    ubyte  unk_specular_pos;
    ubyte  unk_equipment_id;
    ubyte  unk_hoge;
    ubyte  unk_backclip;
    ubyte  unk_envmap_param;
    ubyte  reserved[2];
    float  unk_phong_param_a;
    float  unk_phong_param_b;
    float  unk_blinn_param;
    uint32 padding[3];
    float  diffuse[4];
    float  ambient[4];
    float  specular[4];

    int16  skeletons[num_skeletons];
    int16  skeletons_pairs[num_skeleton_pairs];
    int16  textures[num_skeletons + num_skeleton_pairs]; // ???

    

    FSeek(ofs + ofs_packet);
    int todo;
    FSeek(ofs + ofs_cluster_data);
    int todo;
    FSeek(ofs + ofs_skeletons);
    int todo;
    FSeek(ofs + ofs_skeleton_pairs);
    int todo;
    FSeek(ofs + ofs_data_skeletons);
    int todo;
    FSeek(ofs + ofs_data_skeleton_pairs);
    int todo;
    FSeek(ofs + ofs_text_pos_indices);
    int todo;
    FSeek(ofs + ofs_texture_params);
    int todo;

    // uint32 pad[2];
    // uint32 unk;
    // uint32 unk2;
    // uint32 unk3;
    // uint32 unk4;

    // ubyte unk5[0x4c];
    // FSeek(FTell() + 0x10);

    // uint32 triStripCount; // too big!
    // uint32 vertexCount;   // too big!
    // uint32 vertexSize;    // too big!

    // FSeek(FTell() + 0x10);

    // vertex vertices[vertexCount]; // too big!
} ChrPart;

struct Model3 {
    struct {
        int16 magic;
        Assert(magic == 3, "Not Silent Hill 4: The Room character model");
        int16 magic;
        Assert(magic == -1, "Not Silent Hill 4: The Room character model");
        MeshRevision revision;

        uint32 ofs_bones <format=hex>;
        uint32 num_bones;
        uint32 ofs_parents <format=hex>;

        uint32 num_bone_pairs;
        uint32 ofs_parent_pairs <format=hex>;
        uint32 ofs_bone_pairs <format=hex>;

        uint32 num_vu1_parts;
        uint32 ofs_vu1_parts <format=hex>;
        uint32 num_vu0_parts;
        uint32 ofs_vu0_parts <format=hex>;

        uint32 num_tex;
        uint32 ofs_tex <format=hex>;

        uint32 num_text_poses;
        uint32 ofs_text_poses <format=hex>;
        // up intill here
        uint32 unk_text_pos_params;

        uint32 num_cluster_nodes;
        uint32 ofs_cluster_nodes <format=hex>;

        uint32 num_clusters;
        uint32 ofs_clusters <format=hex>;

        uint32 num_func_data;
        uint32 ofs_func_data <format=hex>;

        uint32 ofs_hit <format=hex>;
        uint32 ofs_box <format=hex>;

        uint32 unk_flag;

        uint32 ofs_relative_matrices <format=hex>;
        uint32 ofs_relative_transes <format=hex>;
        uint32 ofs_hits <format=hex>;
        uint32 unk_reserved_1d;
        uint32 unk_tanmparams;
        uint32 unk_textureextras;
    } hdr;
    FSeek(hdr.ofs_bones);
    FourByFourMatrix bones[hdr.num_bones];

    FSeek(hdr.ofs_bone_pairs);
    FourByFourMatrix bone_pairs[hdr.num_bone_pairs];

    FSeek(hdr.ofs_parents);
    byte parents[hdr.num_bones];

    FSeek(hdr.ofs_parent_pairs);
    byte parent_pairs[hdr.num_bone_pairs * 2];
    
    FSeek(hdr.ofs_tex);
    uint32 tex_idx[hdr.num_tex];

    FSeek(hdr.ofs_text_poses);
    int unk_text_poses_idx[hdr.num_text_poses * 2];

    FSeek(hdr.ofs_cluster_nodes);
    ClusterNode cluster_nodes[hdr.num_cluster_nodes];
    
    FSeek(hdr.ofs_clusters);
    int todo_clusters[hdr.num_clusters]; // 121 ints
    
    if (hdr.num_func_data != 0) {
        FSeek(hdr.ofs_func_data);
        int todo_func_data[hdr.num_func_data];
    }

    FSeek(hdr.ofs_hit);
    int todo_hit;

    FSeek(hdr.ofs_box);
    Box boxes[8];

    if (hdr.num_vu1_parts != 0) {
        FSeek(hdr.ofs_vu1_parts);
        ChrPart chr_vu1_parts <optimize=false>; // need to debug [hdr.num_vu1_parts]
    }

    if (hdr.num_vu0_parts != 0) {
        FSeek(hdr.ofs_vu0_parts);
        ChrPart chr_vu0_parts <optimize=false>;
    }
};

if (GetTemplateName() == "sh4_skeletal_model_pc.bt")
    Model3 char_mdl_block <open=true>;
