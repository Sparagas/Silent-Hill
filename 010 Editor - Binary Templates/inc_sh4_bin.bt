//------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: inc_sh4_bin.bt
//   Authors: Laurynas Zubavičius (Sparagas), Rodolfo Nuñez (roocker666), Hunter Stanton (hun10sta)
//   Version: 0.0
//   Purpose: Parse Silent Hill 4: The Room BIN archive.
//  Category: Archive
// File Mask: *.bin
//  ID Bytes: 
//   History: 
//   0.0   2025-01-01 Laurynas Zubavičius : Initial version.
//------------------------------------------------

#include "sh4_animation.bt"
#include "sh4_fog_data.bt"
#include "sh4_shadow_model.bt"
#include "sh4_skeletal_model_pc.bt"
#include "sh4_slgt.bt"
#include "sh4_static_model_pc.bt"
#include "sh4_path_data.bt"
#include "sh4_textures.bt"

struct File {
    uint8 bytes[FileSize()];
};

int is_all_zeroes(int start) {
    local int original_offset = FTell();
    FSkip(start);
    local int i;
    for (i = start; i < FileSize(); i++) {
        if (ReadUByte() != 0) {
            FSeek(original_offset);
            return false;
        }
        FSkip(1);
    }
    FSeek(original_offset);
    return true;
}

void sh4_bin() {

    // message_pasthome0_k.bin is completely empty with zero size, so we need to test it
    if (!FileSize())
        Exit(0);

    uint32 num_files;
    uint32 ofs_file[num_files];
    
    local uint32 len_file[num_files];
    local uint32 i;
    for (i = 0; i < num_files - 1; i++)
        len_file[i] = ofs_file[i + 1] - ofs_file[i];
    len_file[num_files - 1] = FileSize() - ofs_file[num_files - 1];

    for (i = 0; i < num_files; i++) {
        FSeek(ofs_file[i]);
        OffsetSetStart(FTell());
        OffsetSetLimitSize(len_file[i]);

        // if filename is fontdata, then all files inside are fonts (there is no other way to recognise it)
        if (Memcmp(FileNameGetBase(GetFileName()), "fontdata", 8) == 0)
            File sh4_font_data;

        // exclusive sample.bin
        else if (FileNameGetBase(GetFileName()) == "sample.bin")
            File test_text_file;

        // exclusive param.bin
        else if (FileNameGetBase(GetFileName()) == "param.bin")
            if (ReadInt() == 1414743380)
                File test_text_file;
            else
                struct {
                    float floats[FileSize() / 4];
                } test_float_file;

        // exclusive in demo.bin is one unknown file type
        else if (ReadInt() == 0x0000DE30)
            File unk_file;

        // empty file. message_end0_?.bin files only has 2 zero byte file inside
        else if (FileSize() == 2)
            File empty_file;

        // skeletal model file
        else if (ReadUInt() == 0xFFFF0003)
            if (platform == "PC")
                Model3 sh4_skeletal_model;
            else
                File sh4_skeletal_model_non_pc;

        // shadow model file
        else if (ReadUInt() == 0x0FC07000)
            SGSVModel sh4_shadow_model;

        // static model file
        else if (ReadUInt() == 0xFC030001) {
            if (platform == "PS2")
                File sh4_static_model_ps2;
            else if (platform == "Xbox")
                File sh4_static_model_xbox;
            else if (platform == "PC")
                WorldModel sh4_static_model_pc;
        }

        // SH3 static model and textures for PS2 version test files! Only present in sb06.bin and mzXX.bin.
        else if (ReadUInt() == 0xFFFFFFFF)
            File sh3_static_model_ps2;

        // collision model file
        else if (ReadUInt() == 0x0002FF11)
            File sh4_collision_model;

        // collision model file for SH3?  Only present in hit1.bin.
        else if (ReadUInt() == 0x0001FF11)
            File unk_collision_model;

        // collision model file for SH3?  Only present in sb06.bin.
        else if (ReadUInt() == 0x0000FF11)
            File sh3_collision_model;

        // unknown models found in hit1.bin
        else if ((ReadUInt() == 0 || ReadUInt() == 6) && ReadUInt(4) == 0x10)
            File unk_collision_model;

        // SLGT S-light file. After that majority of the time goes fog data file, but not always
        else if (ReadUInt() == 0x54474C53)
            Sh4Slgt sh4_slgt;

        // animation file
        else if (ReadUInt() == 0xFF010001)
            Sh4Animation sh4_animation;

        // SDB file file
        else if (ReadUShort() == 0x8581)
            File sh4_sdb;

        // se_* file
        else if (ReadUInt() == 1 && ReadUInt(4) == 3)
            File sh4_se_file;

        // PlayStation 2 3D save icon. Only one exist in save_icon.bin, and mc_icon_kari.bin. This file exist even in non-PS2 versions.
        else if (ReadUInt() == 0x00010000)
            File ps2_save_icon;

        // These files don't have headers so it needs more complicated identification.

        // Fog data. After 14 bytes goes 50 zeroes.
        else if (ReadFloat() < ReadFloat(4) && !ReadShort(14) && !ReadFloat(16) && !ReadFloat(20) && !ReadFloat(24) && !ReadFloat(28))
            Sh4Fog sh4_fog_data;

        // Fog data but with empy values. mz32.bin is the size of 176, so this is a hack.
        else if (((FileSize() >= 64 && FileSize() < 144) || FileSize() == 176) && !ReadFloat() && !ReadFloat(4))
            Sh4Fog sh4_fog_data_empty;

        // texture file
        else if (FileSize() >= 144 && ReadUShort() && !ReadUInt(4) && !ReadUInt(8) && !ReadUInt(12))
            Sh4Textures sh4_textures;

        // texture file but with empy values
        else if (FileSize() >= 144 && !ReadUInt() && !ReadUInt(4) && !ReadUInt(8) && !ReadUInt(12))
            File sh4_textures_empty;

        // text file
        else if (ReadUShort() + 1 == ReadUShort(2))
            File sh4_messages;
        
        // path file
        else if (ReadUInt() && ReadUInt() <= FileSize() && (FileSize() - ReadUInt()) % 4 == 0)
            SH4Path sh4_path_data;

        // Unknown file. Idealy this should only be executed in demo.bin one file.
        else {
            File unk_file;
            Warning("unknown file type");
        }
        
        OffsetClear();
    }
}
