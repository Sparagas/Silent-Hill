//------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: inc_sh4_bin.bt
//   Authors: Laurynas Zubavičius (Sparagas), Rodolfo Nuñez (roocker666), Hunter Stanton (hun10sta)
//   Version: 0.0
//   Purpose: Parse Silent Hill 4: The Room BIN archive.
//  Category: Archive
// File Mask: *.bin
//  ID Bytes: 
//   History: 
//   0.0   2025-01-01 Laurynas Zubavičius : Initial version.
//------------------------------------------------

#include "sh4_animation.bt"
#include "sh4_fog_data.bt"
#include "sh4_shadow_model.bt"
#include "sh4_skeletal_model_pc.bt"
#include "sh4_slgt.bt"
#include "sh4_static_model_pc.bt"
#include "sh4_textures.bt"

struct File {
    uint8 bytes[FileSize()];
};

int is_all_zeroes() {
    local int original_offset = FTell();
    local int i;
    for (i = 0; i < FileSize(); i++) {
        if (ReadUByte() != 0) {
            FSeek(original_offset);
            return false;
        }
        FSkip(1);
    }
    FSeek(original_offset);
    return true;
}

void sh4_bin() {

    if (!FileSize())
        Exit(0);

    uint32 num_files;
    uint32 ofs_file[num_files];
    
    local uint32 len_file[num_files];
    local uint32 i;
    for (i = 0; i < num_files - 1; i++)
        len_file[i] = ofs_file[i + 1] - ofs_file[i];
    len_file[num_files - 1] = FileSize() - ofs_file[num_files - 1];

    for (i = 0; i < num_files; i++) {
        FSeek(ofs_file[i]);
        OffsetSetStart(FTell());
        OffsetSetLimitSize(len_file[i]);

        // empty file
        if (is_all_zeroes())
            File empty_file;

        // could be text file
        else if (ReadUInt() == 0)
            File unk_0000_0000;

        // SH3 static model and textures PS2 version test files!
        else if (ReadUInt() == 0xFFFFFFFF)
            File sh3_ps2_test_file;

        // PlayStation 2 3D save icon
        else if (ReadUInt() == 0x00010000)
            File ps2_save_icon;

        // shadow model file
        else if (ReadUInt() == 0x0FC07000)
            SGSVModel sh4_shadow_model;

        // collision model file for SH3?
        else if (ReadUInt() == 0x0000FF11)
            File sh3_collision_model;

        // collision model file
        else if (ReadUInt() == 0x0002FF11)
            File sh4_collision_model;

        // skeletal model file
        else if (ReadUInt() == 0xFFFF0003)
            if (platform == "PC")
                Model3 sh4_skeletal_model;
            else
                File sh4_skeletal_model_non_pc;

        // SDB file file
        else if (ReadUShort() == 0x8581)
            File sh4_sdb;

        // Monster ID list file
        else if (ReadUShort() == 0x4554)
            File monster_id_list;

        // SLGT S-light file 
        else if (ReadUInt() == 0x54474C53)
            Sh4Slgt sh4_slgt;

        // animation file
        else if (ReadUInt() == 0xFF010001)
            Sh4Animation sh4_animation;

        // static model file
        else if (ReadUInt() == 0xFC030001) {
            if (platform == "PS2")
                File sh4_static_model_ps2;
            else if (platform == "Xbox")
                File sh4_static_model_xbox;
            else if (platform == "PC")
                WorldModel sh4_static_model_pc;
        }

        // texture file
        else if (ReadUShort() == ReadUShort(2) && ReadUInt(4) == 0 && ReadUInt(8) == 0 && ReadUInt(12) == 0)
            Sh4Textures sh4_textures;

        // text file
        else if (ReadUShort(2) == ReadUShort() + 1)
            File sh4_messages;

        // unknown se_en_* and se_start file
        else if (ReadUInt() == 1 && ReadUInt(4) == 3)
            File sh4_se_file;

        // fog data file
        // after 14 bytes only goes 2 zeroes, and it looks like after that goes 48 zeroes
        else if (ReadFloat() < ReadFloat(4) && ReadUShort(14) == 0)
            Fog sh4_fog_data;

        // unknown path file
        // second is number of FF FF FF FF
        else if (ReadUInt() <= FileSize() && (FileSize() - ReadUInt()) % 4 == 0)
            File sh4_path_file;

        // unknown file
        else {
            File unk_file;
            Warning("unknown file type");
        }
        
        OffsetClear();
    }
}
